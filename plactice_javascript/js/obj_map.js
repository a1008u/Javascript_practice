/* 基本データ型を扱う */
// 集合を管理/操作を扱う(Map_es2015)

let m1 = new Map();
m1.set('dog', 'わんわん');
m1.set('cat', 'ニヤー');
m1.set('mouse','チュー');

/* 結果：3
 * 結果：わんわん
 * 結果：true
 */
console.log(m1.size);
console.log(m1.get('dog'));
console.log(m1.has('cat'));

/* 結果： dog cat mouse*/
for (let key of m1.keys()){
    console.log(key);
}

/* 結果： わんわん ニヤー チュー*/
for (let value of m1.values()){
    console.log(value);
}

/* 結果： わんわん ニヤー チュー*/
for (let [key,value] of m1){
    console.log(value);
}

m1.delete('dog');
console.log(m1.size); //結果：2

m1.clear();
console.log(m1.size);//結果：0



/* オブジェクトリテラルとの違い
（1）任意の型でキーを設定できる
オブジェクトリテラルでは、
あくまでプロパティ名をキーとして代替していたので、
キーとして利用できるのは文字列だけでした。
しかし、Mapオブジェクトでは任意の型をキーとして利用できます。
たとえば、オブジェクトやNaNすら、キーになりえます。

（2）マップのサイズを取得できる
Mapオブジェクトではsizeプロパティを使って、登録されたキー／値の個数を取得できます。
しかし、オブジェクトリテラルでは、そうしたしくみはありません。
for...inループなどでオブジェクトを走査し、手動でカウントする必要があります。

（3）クリーンなマップを作成できる
オブジェクトリテラルは、その実体はObjectオブジェクトです。
配下には、Objectオブジェクトが標準で用意しているプロパティ（キー）が最初から存在します。
空のオブジェクトリテラルを作成した時点で、すでに空ではないということです。
Mapオブジェクトはそれ専用のオブジェクトなので、完全に空の連想配列を生成できます。

Mapの特徴
1）キーは「===」演算子で比較される
2）特別なNaNは特別ではない(Mapの世界では、例外的にNaN === NaNと見なされます)
3）オブジェクトの比較には要注意(参照先が異なるため)

*/


